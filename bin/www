#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('test:server');
var http = require('http');
var io = require('socket.io');
var Twitter = require('twitter');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
io = io(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Tweet tweet.
 */

var tweets = {};

var twitterClient = new Twitter({
  consumer_key: "YWypvQAD1s9qPkUvZCpCMZDFj",
  consumer_secret: "DZqqE3ijVmf8rEWqfptu9j5M6YmbCYt3hVWre50aS8zxtGGFxi",
  access_token_key: "707901665668689920-2MWWWgQZmhF18Rteo61aCM3Qjiccf9O",
  access_token_secret: "ws3ZcRkAToLPbekAXuxt6sqNYICvGO111T6cQYm67KyrQ"
});

var stream = null;
var track = "#DTS16";
var users = [];
var latestTweets = null;
var allTweets = [];
var updateTweetsInterval;

function emitAllTweets(socket) {
  var top50;

  top50 = allTweets.slice(0, 50);

  socket.broadcast.emit('all tweets', top50);
  socket.emit('all tweets', top50);
}

function norTweets() {
  var i;

  for (i = 0; i < allTweets.length; i++) {
    allTweets[i].score = allTweets[i].favorite_count + allTweets[i].retweet_count + 1;
  }

  allTweets.sort(function(a, b) {
    return a.score < b.score ? 1 : -1;
  });
}

function addTweet(socket, tweet, update) {
  var exists = false, existsIndex = null, i;

  if (!tweet.in_reply_to_status_id && !tweet.retweeted_status) {
    for (i = 0; i < allTweets.length; i++) {
      if (allTweets[i].id_str === tweet.id_str) {
        exists = true;
        existsIndex = i;
        break;
      }
    }

    if (exists && update || !exists) {
      if (existsIndex !== null) {
        allTweets[existsIndex] = tweet;
      } else {
        allTweets.push(tweet);
      }

      norTweets();

      if (socket) {
        emitAllTweets(socket);
      }

      return true;
    }
  }

  return false;
}

function removeTweet(socket, tweetId) {
  var i;

  for (i = 0; i < allTweets.length; i++) {
    if (allTweets[i] === tweetId) {
      allTweets.splice(i, 1);
    }
  }

  norTweets();

  if (socket) {
    emitAllTweets(socket);
  }
}

function updateTweets(socket) {
  var ids = [], i;

  for (i = 0; i < allTweets.length; i++) {
    ids.push(allTweets[i].id_str);
  }

  if (ids.length) {
    console.log('Requesting tweet updates...');

    twitterClient.post(
      'statuses/lookup',
      {
        id: ids.join(','),
        map: true,
        include_entities: true
      },
      function(error, data, response) {
        var i;

        if (data && 'id' in data) {
          console.log('Tweet updates received.');

          for (i in data.id) {
            if (data.id.hasOwnProperty(i)) {
              if (data.id[i] !== null) {
                // probably updated
                addTweet(socket, data.id[i], true);
              } else {
                // deleted or unavailable
                removeTweet(socket, i);
              }
            }
          }
        } else {
          console.log('! Empty response when requesting tweet updates.');
        }
      }
    );
  }
}

function logConnectedUsers() {
  console.log(users.length + ' users connected at this moment' + (users.length ? ': ' + users.join(', ') : '.'));
}

function disconnect() {
  console.log('! No users connected. Streaming destroyed. Application state reset.');

  // if there are no users connected we destroy the stream.
  stream.destroy();
  stream = null;
  latestTweets = null;
  allTweets = [];
  clearInterval(updateTweetsInterval);

  console.log(new Array(80).join('-'));
}

io.sockets.on("connection", function(socket) {
  if (users.indexOf(socket.id) === -1) {
    console.log('User connected: ' + socket.id);
    users.push(socket.id);
  }

  logConnectedUsers();

  if (stream !== null) {
    emitAllTweets(socket);
  }

  socket.on("start stream", function() {
    // the stream will be started only when the 1st user arrives.
    if (stream === null) {
      console.log('Initiating streaming...');
      twitterClient.stream("statuses/filter", {
        track: track
      }, function(s) {
        console.log('Streaming initiated.');

        stream = s;
        stream.on("data", function(tweet) {
          // only broadcast when users are online.
          if (users.length > 0) {
            console.log('New tweet!');

            if (addTweet(socket, tweet)) {
              // this emits the signal to all users but the one that started the stream.
              socket.broadcast.emit("new tweet", tweet);
              // this emits the signal to the user that started the stream.
              socket.emit("new tweet", tweet);
            }
          } else {
            disconnect();
          }
        });
        stream.on('error', function(error) {
          console.log('! Streaming error.', error);
        });

        console.log('Requesting previously posted tweets...');
        twitterClient.get('search/tweets', {
          q: track,
          result_type: 'recent',
          include_entities: true
        }, function(error, tweets, response) {
          var i;

          if (tweets && !error) {
            console.log('Previously posted tweets received.');

            latestTweets = tweets;

            for (i = 0; i < tweets.statuses.length; i++) {
              addTweet(socket, tweets.statuses[i]);
            }

            console.log('Previously posted tweets emitted.');

            socket.broadcast.emit('latest tweets', tweets);
            socket.emit('latest tweets', tweets);
          } else if (!tweets) {
            console.log('! No previously posted tweets found.');
          } else {
            console.log('! Could not retrieve previously posted tweets.');
          }
        });

        updateTweetsInterval = setInterval(function() {
          updateTweets(socket);
        }, 20 * 1000);
      });
    }
  });

  socket.on("disconnect", function(o) {
    // find the user in the array.
    var index = users.indexOf(socket.id);

    if (index !== -1) {
      console.log('User ' + users[index] + ' disconnected.');
      users.splice(index, 1);
    }

    logConnectedUsers();

    if (!users.length) {
      disconnect();
    }
  });

  socket.emit("connected", {
    tracking: track
  });
});

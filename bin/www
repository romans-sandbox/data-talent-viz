#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('test:server');
var http = require('http');
var io = require('socket.io');
var Twitter = require('twitter');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
io = io(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Tweet tweet.
 */

var tweets = {};

var twitterClient = new Twitter({
  consumer_key: "EnvraFkTwKtXKs5F64fj6KqoG",
  consumer_secret: "gxWoM9qKR3ZRHZGxac18I5JJAglhwZe1kVwgYeSrKvLEoH4aW5",
  access_token_key: "709412533468327936-oOkRjmfIWAEJVeGI7NypXsjpw2Xz8u6",
  access_token_secret: "SGY7Prz1b5ONhXvlVwHFfyw33e9AfvLLRDRmFemaMk1kn"
});

var stream = null;
var track = "#digiscot";
var users = [];
var latestTweets = null;
var allTweets = [];
var requestLatestTweets = false;

function emitAllTweets(socket) {
  var top50;

  top50 = allTweets.slice(0, 100);

  socket.broadcast.emit('all tweets', top50);
  socket.emit('all tweets', top50);
}

function norTweets() {
  var i;

  for (i = 0; i < allTweets.length; i++) {
    allTweets[i].score = allTweets[i].favorite_count + allTweets[i].retweet_count + 1;
  }

  allTweets.sort(function(a, b) {
    if (a.score == b.score) {
      return a.id_str > b.id_str ? 1 : -1;
    }

    return a.score < b.score ? 1 : -1;
  });

  for (i = 0; i < allTweets.length; i++) {
    allTweets[i].number = i + 1;
  }
}

function addTweet(socket, tweet, update) {
  var exists = false, existsIndex = null, i;

  if (!tweet.in_reply_to_status_id && !tweet.retweeted_status) {
    for (i = 0; i < allTweets.length; i++) {
      if (allTweets[i].id_str === tweet.id_str) {
        exists = true;
        existsIndex = i;
        break;
      }
    }

    if (exists && update || !exists) {
      if (existsIndex !== null) {
        allTweets[existsIndex] = tweet;
      } else {
        allTweets.push(tweet);
      }

      norTweets();

      if (socket) {
        emitAllTweets(socket);
      }

      return true;
    }
  }

  return false;
}

function removeTweet(socket, tweetId) {
  var i;

  for (i = 0; i < allTweets.length; i++) {
    if (allTweets[i] === tweetId) {
      allTweets.splice(i, 1);
    }
  }

  norTweets();

  if (socket) {
    emitAllTweets(socket);
  }
}

function chunk(arr, len) {
  var chunks = [],
    i = 0,
    n = arr.length;

  while (i < n) {
    chunks.push(arr.slice(i, i += len));
  }

  return chunks;
}

function updateTweets(socket) {
  var allIds = ["834735333795328000", "834735128475791362", "834735088743104512", "834734958421872641", "834734829002424320", "834734152016678913", "834734146564083713", "834734111742947328", "834734081413873664", "834733925784227841", "834733754866352130", "834733589744881665", "834733522686451712", "834733374354898944", "834733263356825600", "834733095098150913", "834733011803525121", "834732972582588416", "834732921642688512", "834732856144441345", "834732649902198785", "834732522219118592", "834732367071830017", "834732364706279424", "834732225874817024", "834732145600057344", "834732135378538496", "834732125312122880", "834731998644154368", "834731991077621760", "834731885901312000", "834731782494941188", "834731491091415040", "834731468811333633", "834731396388311040", "834731260731863040", "834730999678382083", "834730996377456640", "834730925921533952", "834730890924277765", "834730882690904064", "834730398588477440", "834730100587376640", "834729822391791616", "834729753911447552", "834729235629666304", "834726374552199169", "834725670588645376", "834724657341353984", "834724518891503617", "834723835547119616", "834723714122051585", "834723687794343936", "834723235170250752", "834722819007209472", "834722800485142528", "834722632482308096", "834721553082417152", "834721062160068608", "834720998314348544", "834720977460269056", "834720941443788800", "834720876323028992", "834720523590443008", "834720234984587265", "834720109587525632", "834720086443294720", "834720027710337025", "834720023205838848", "834720014490038272", "834719752887091200", "834719471046623234", "834719247582580737", "834719157727924225", "834718034040352768", "834717778762416128", "834717708910526465", "834717425581031428", "834717193170513924", "834716843730411520", "834716741615964160", "834716446383022080", "834716289142759425", "834716215289462784", "834716181491761152", "834716105134452736", "834715886195994624", "834715803857592320", "834715730234966016", "834715682432495616", "834715307402997760", "834715250628898818", "834715144076795904", "834714840904167424", "834714641024614400", "834714322303610880", "834714114685538305", "834714006434803712", "834713844475953152", "834713730822848513", "834713660706717696", "834713648304111621", "834713593572626432", "834713576103354368", "834713423938203649", "834713335568486400", "834713252458270720", "834713081527812096", "834712741076144129", "834712356127199232", "834712286178770944", "834712147737341953", "834711808816582656", "834711748049506307", "834711698493865985", "834711645431746566", "834711480817819648", "834711416313696256", "834711358432231425", "834711345383821312", "834711261220835328", "834711233404207106", "834711183676542976", "834711163288043520", "834711156782665728", "834711141809012736", "834711051698581504", "834711002021236736", "834710653399158784", "834710583463247872", "834709611970232320", "834709416674996224", "834709216569020416", "834709037237334016", "834708964071899136", "834708843867275265", "834708751596781568", "834708533455310849", "834708469689245696", "834708380912607232", "834708252424232961", "834708089840476160", "834708049910759424", "834707826761166853", "834707812164976640", "834707799766622209", "834707748189257728", "834707246563131392", "834707023774228480", "834706166219431936", "834706054910976000", "834705763318767616", "834705509966024704", "834705391615369216", "834705241987768321", "834705152401690624", "834705067915755520", "834704887204151297", "834704774620659712", "834704466280587264", "834704172784242694", "834703151773188097", "834703074014920704", "834703007602311169", "834702830963404801", "834702609403506689", "834702529673953280", "834702329408548865", "834702119290671104", "834702036985925633", "834701965724700672", "834701863563964416", "834701685993910276", "834701577923547136", "834701572915523584", "834701475041443840", "834701414676963328", "834701387363733504", "834701278768930816", "834701252898459648", "834701238025453568", "834701107310030848", "834700323470065665", "834700082159169536", "834699930077888512", "834699796891971584", "834699543983882240", "834698961113976832", "834698828016185344", "834698674898878465", "834698325534322688", "834697893625868288", "834697700184616960", "834696629382967297", "834696268010094592", "834695453962809345", "834695079579230208", "834694920728358912", "834694585674764288", "834694096128241664", "834693564294688769", "834693452235415554", "834692804362326016", "834692677471989761", "834692643938504704", "834692140898852865", "834692057289601024", "834688475458830336", "834684828855443456", "834683300081971201", "834683298651766785", "834682969122099200", "834682494087790592", "834682494075203584", "834682485690757120", "834679794151337984", "834679471026352128", "834679424725483521", "834679143409278976", "834679066305363968", "834678892011085824", "834678336706207745", "834677658675970048", "834677152108904449", "834676548821217281", "834675975220785153", "834674900476502016", "834672772164964352", "834672520452329472", "834672301182435328", "834669786525212672", "834664985389305856", "834644154135228416", "834640627585331200", "834540995723329536", "834523405781237768", "834508959486730244", "834503712211140608", "834497428652961797", "834492619677958147", "834456320023597056", "834446474809397249", "834371159185580033", "834351846017867776", "834350307664539648", "834349515968741376", "834348518143905792", "834001094112137217", "833987134159802368", "833741165556068352", "833686820810526721", "833602093315457024", "833418630561988608", "832598723746201604", "832570809570979841", "832570395362471936", "832245038717472770", "831932608632279047", "830471347713093632", "828918875047747584", "827215183999270914", "827137568974237698", "826840005414772738", "826792988231729152", "826535457391525894", "826521284716662784", "826517957161398272", "826498549542174720", "823916120721813504", "823057506180046849", "820324556221005824", "819554613686697984", "818070535552831490", "818057928167084032", "817991714744844288", "816859230497976320", "816776226677235712"], idChunks, i;

  for (i = 0; i < allTweets.length; i++) {
    allIds.push(allTweets[i].id_str);
  }

  idChunks = chunk(allIds, 100);

  if (idChunks.length) {
    for (i = 0; i < idChunks.length; i++) {
      (function(ids, i) {
        setTimeout(function() {
          console.log('Requesting tweet updates (' + (i * 100 + 1) + ' to ' + Math.min(allIds.length, i * 100 + 100) + ' of ' + allIds.length + ')...');

          twitterClient.post(
            'statuses/lookup',
            {
              id: ids.join(','),
              map: true,
              include_entities: true
            },
            function(error, data, response) {
              var k;

              if (data && 'id' in data) {
                console.log('Tweet updates received.');

                for (k in data.id) {
                  if (data.id.hasOwnProperty(k)) {
                    if (data.id[k] !== null) {
                      // probably updated
                      addTweet(socket, data.id[k], true);
                    } else {
                      // deleted or unavailable
                      removeTweet(socket, k);
                    }
                  }
                }
              } else {
                console.log(error);
                console.log('! Empty response when requesting tweet updates.');
              }
            }
          );
        }, i * 20 * 1000);
      })(idChunks[i], i);
    }

    setTimeout(function() {
      updateTweets(socket);
    }, idChunks.length * 20 * 1000);
  }
}

function logConnectedUsers() {
  console.log(users.length + ' users connected at this moment' + (users.length ? ': ' + users.join(', ') : '.'));
}

function disconnect() {
  console.log('! No users connected.');

  latestTweets = null;

  console.log(new Array(80).join('-'));
}

io.sockets.on("connection", function(socket) {
  if (users.indexOf(socket.id) === -1) {
    console.log('User connected: ' + socket.id);
    users.push(socket.id);
  }

  logConnectedUsers();

  if (stream !== null) {
    emitAllTweets(socket);
  }

  socket.on("start stream", function() {
    // the stream will be started only when the 1st user arrives.
    if (stream === null) {
      console.log('Initiating streaming...');
      twitterClient.stream("statuses/filter", {
        track: track
      }, function(s) {
        console.log('Streaming initiated.');

        stream = s;
        stream.on("data", function(tweet) {
          // only broadcast when users are online.
          if (users.length > 0) {
            if (addTweet(socket, tweet)) {
              console.log('New tweet!');

              // this emits the signal to all users but the one that started the stream.
              socket.broadcast.emit("new tweet", tweet);
              // this emits the signal to the user that started the stream.
              socket.emit("new tweet", tweet);
            }
          } else {
            disconnect();
          }
        });
        stream.on('error', function(error) {
          console.log('! Streaming error.', error);
        });

        if (requestLatestTweets) {
          console.log('Requesting previously posted tweets...');
          twitterClient.get('search/tweets', {
            q: track,
            result_type: 'recent',
            include_entities: true
          }, function(error, tweets, response) {
            var i;

            if (tweets && !error) {
              console.log('Previously posted tweets received.');

              latestTweets = tweets;

              for (i = 0; i < tweets.statuses.length; i++) {
                addTweet(socket, tweets.statuses[i]);
              }

              console.log('Previously posted tweets emitted.');

              socket.broadcast.emit('latest tweets', tweets);
              socket.emit('latest tweets', tweets);
            } else if (!tweets) {
              console.log('! No previously posted tweets found.');
            } else {
              console.log('! Could not retrieve previously posted tweets.');
            }
          });
        }

        setTimeout(function() {
          updateTweets(socket);
        }, 20 * 1000);

        console.log('Update tweets timer registered.');
      });
    }
  });

  socket.on("disconnect", function(o) {
    // find the user in the array.
    var index = users.indexOf(socket.id);

    if (index !== -1) {
      console.log('User ' + users[index] + ' disconnected.');
      users.splice(index, 1);
    }

    logConnectedUsers();

    if (!users.length) {
      disconnect();
    }
  });

  socket.emit("connected", {
    tracking: track
  });
});

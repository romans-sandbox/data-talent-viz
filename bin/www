#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('test:server');
var http = require('http');
var io = require('socket.io');
var Twitter = require('twitter');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
io = io(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Tweet tweet.
 */

var tweets = {};

var twitterClient = new Twitter({
  consumer_key: "EnvraFkTwKtXKs5F64fj6KqoG",
  consumer_secret: "gxWoM9qKR3ZRHZGxac18I5JJAglhwZe1kVwgYeSrKvLEoH4aW5",
  access_token_key: "709412533468327936-oOkRjmfIWAEJVeGI7NypXsjpw2Xz8u6",
  access_token_secret: "SGY7Prz1b5ONhXvlVwHFfyw33e9AfvLLRDRmFemaMk1kn"
});

var stream = null;
var track = "#iotscot";
var users = [];
var latestTweets = null;
var allTweets = [];
var requestLatestTweets = false;

function emitAllTweets(socket) {
  var top50;

  top50 = allTweets.slice(0, 100);

  socket.broadcast.emit('all tweets', top50);
  socket.emit('all tweets', top50);
}

function norTweets() {
  var i;

  for (i = 0; i < allTweets.length; i++) {
    allTweets[i].score = allTweets[i].favorite_count + allTweets[i].retweet_count + 1;
  }

  allTweets.sort(function(a, b) {
    if (a.score == b.score) {
      return a.id_str > b.id_str ? 1 : -1;
    }

    return a.score < b.score ? 1 : -1;
  });

  for (i = 0; i < allTweets.length; i++) {
    allTweets[i].number = i + 1;
  }
}

function addTweet(socket, tweet, update) {
  var exists = false, existsIndex = null, i;

  if (!tweet.in_reply_to_status_id && !tweet.retweeted_status) {
    for (i = 0; i < allTweets.length; i++) {
      if (allTweets[i].id_str === tweet.id_str) {
        exists = true;
        existsIndex = i;
        break;
      }
    }

    if (exists && update || !exists) {
      if (existsIndex !== null) {
        allTweets[existsIndex] = tweet;
      } else {
        allTweets.push(tweet);
      }

      norTweets();

      if (socket) {
        emitAllTweets(socket);
      }

      return true;
    }
  }

  return false;
}

function removeTweet(socket, tweetId) {
  var i;

  for (i = 0; i < allTweets.length; i++) {
    if (allTweets[i] === tweetId) {
      allTweets.splice(i, 1);
    }
  }

  norTweets();

  if (socket) {
    emitAllTweets(socket);
  }
}

function chunk(arr, len) {
  var chunks = [],
    i = 0,
    n = arr.length;

  while (i < n) {
    chunks.push(arr.slice(i, i += len));
  }

  return chunks;
}

function updateTweets(socket) {
  var allIds = ["781393038597914628", "781403449418248192", "781390249926725633", "781390482735788032", "781391387052892161", "781391805153763328", "781396757376892928", "781397559659069440", "781397963528663040", "781399873023307776", "781400811712684032", "781404833408507904", "781404971778641920", "781406562321661952", "781408016855920640", "781409524364222465", "781410424621236224", "781410639751344128", "781411517115822080", "781411972910841856", "781412025402523648", "781412294018342913", "781412325677002752", "781412671895863296", "781412730444087296", "781445068641144833", "781444661026103296", "781443689549824000", "781443268005552128", "781443266248056832", "781443085741985792", "781442944414978048", "781442697622065152", "781442683042693120", "781442525471109120", "781442457183653889", "781442386400538624", "781442014399332352", "781441622567510016", "781441433014263808", "781440614281965568", "781440583667679232", "781440485504258048", "781437822007963648", "781436407550181377", "781435162869526528", "781433813440290816", "781433683416850432", "781433527023828992", "781433018649088000", "781432211434266624", "781432191465168897", "781430785341521920", "781430570517688320", "781429775973965826", "781429759737729024", "781429692423401472", "781429542342823936", "781429294039986176", "781428840560267264", "781428818414280704", "781428258327912448", "781427956992344064", "781427903414296576", "781427456712597504", "781427230262132736", "781427164411486208", "781426751469674496", "781426748504309760", "781426354470387712", "781426039146807297", "781426036613480448", "781425844958990336", "781425441785647104", "781425188495822848", "781425066970144768", "781424803869761536", "781424689168125952", "781424514529955840", "781424387677446144", "781424155157753856", "781423331627204608", "781422779916746753", "781422324205715457", "781422318945984512", "781422214876958720", "781422201148932096", "781421834407407616", "781421545927376896", "781421241651630080", "781421201285648384", "781420972146565120", "781420827334086656", "781420659293446144", "781420604314517504", "781420495015215104", "781420418523627520", "781420387057934336", "781420271823708160", "781419658582851584", "781419353703116800", "781419237814534144", "781418448056414208", "781418337775517696", "781418245471539200", "781418150143397888", "781417880923598848", "781417302004752384", "781416628177268736", "781416621109903360", "781416450590404608", "781416197413797888", "781416197216763904", "781416196876926976", "781416196843462656", "781416196306530305", "781416070733234176", "781415902994718724", "781415590418345984", "781415008316030976", "781414982328221696", "781414909611474944", "781413888373948416", "781413239238385665", "781413129091776513", "781411109421088768", "781387129167474689", "781386498734231553", "781384693203763200", "781365284460429312", "781364600491081728", "781361955000975360", "781359194163318789", "781239431428763650", "781238069508833280", "781236756154871808", "781236150769856512", "781193004576944128", "781179666879086592", "781178154518020096", "781176719382310912", "781164062960869377", "781151630276386816", "781137203250561029", "781084361026367489", "781061817049251840", "780895744085598208", "780776512618426368", "780717496991158272"], idChunks, i;

  for (i = 0; i < allTweets.length; i++) {
    allIds.push(allTweets[i].id_str);
  }

  idChunks = chunk(allIds, 100);

  if (idChunks.length) {
    for (i = 0; i < idChunks.length; i++) {
      (function(ids, i) {
        setTimeout(function() {
          console.log('Requesting tweet updates (' + (i * 100 + 1) + ' to ' + Math.min(allIds.length, i * 100 + 100) + ' of ' + allIds.length + ')...');

          twitterClient.post(
            'statuses/lookup',
            {
              id: ids.join(','),
              map: true,
              include_entities: true
            },
            function(error, data, response) {
              var k;

              if (data && 'id' in data) {
                console.log('Tweet updates received.');

                for (k in data.id) {
                  if (data.id.hasOwnProperty(k)) {
                    if (data.id[k] !== null) {
                      // probably updated
                      addTweet(socket, data.id[k], true);
                    } else {
                      // deleted or unavailable
                      removeTweet(socket, k);
                    }
                  }
                }
              } else {
                console.log(error);
                console.log('! Empty response when requesting tweet updates.');
              }
            }
          );
        }, i * 20 * 1000);
      })(idChunks[i], i);
    }

    setTimeout(function() {
      updateTweets(socket);
    }, idChunks.length * 20 * 1000);
  }
}

function logConnectedUsers() {
  console.log(users.length + ' users connected at this moment' + (users.length ? ': ' + users.join(', ') : '.'));
}

function disconnect() {
  console.log('! No users connected.');

  latestTweets = null;

  console.log(new Array(80).join('-'));
}

io.sockets.on("connection", function(socket) {
  if (users.indexOf(socket.id) === -1) {
    console.log('User connected: ' + socket.id);
    users.push(socket.id);
  }

  logConnectedUsers();

  if (stream !== null) {
    emitAllTweets(socket);
  }

  socket.on("start stream", function() {
    // the stream will be started only when the 1st user arrives.
    if (stream === null) {
      console.log('Initiating streaming...');
      twitterClient.stream("statuses/filter", {
        track: track
      }, function(s) {
        console.log('Streaming initiated.');

        stream = s;
        stream.on("data", function(tweet) {
          // only broadcast when users are online.
          if (users.length > 0) {
            if (addTweet(socket, tweet)) {
              console.log('New tweet!');

              // this emits the signal to all users but the one that started the stream.
              socket.broadcast.emit("new tweet", tweet);
              // this emits the signal to the user that started the stream.
              socket.emit("new tweet", tweet);
            }
          } else {
            disconnect();
          }
        });
        stream.on('error', function(error) {
          console.log('! Streaming error.', error);
        });

        if (requestLatestTweets) {
          console.log('Requesting previously posted tweets...');
          twitterClient.get('search/tweets', {
            q: track,
            result_type: 'recent',
            include_entities: true
          }, function(error, tweets, response) {
            var i;

            if (tweets && !error) {
              console.log('Previously posted tweets received.');

              latestTweets = tweets;

              for (i = 0; i < tweets.statuses.length; i++) {
                addTweet(socket, tweets.statuses[i]);
              }

              console.log('Previously posted tweets emitted.');

              socket.broadcast.emit('latest tweets', tweets);
              socket.emit('latest tweets', tweets);
            } else if (!tweets) {
              console.log('! No previously posted tweets found.');
            } else {
              console.log('! Could not retrieve previously posted tweets.');
            }
          });
        }

        setTimeout(function() {
          updateTweets(socket);
        }, 20 * 1000);

        console.log('Update tweets timer registered.');
      });
    }
  });

  socket.on("disconnect", function(o) {
    // find the user in the array.
    var index = users.indexOf(socket.id);

    if (index !== -1) {
      console.log('User ' + users[index] + ' disconnected.');
      users.splice(index, 1);
    }

    logConnectedUsers();

    if (!users.length) {
      disconnect();
    }
  });

  socket.emit("connected", {
    tracking: track
  });
});

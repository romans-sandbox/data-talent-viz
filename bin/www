#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('test:server');
var http = require('http');
var io = require('socket.io');
var Twitter = require('twitter');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
io = io(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Tweet tweet.
 */

var tweets = {};

var twitterClient = new Twitter({
  consumer_key: "EnvraFkTwKtXKs5F64fj6KqoG",
  consumer_secret: "gxWoM9qKR3ZRHZGxac18I5JJAglhwZe1kVwgYeSrKvLEoH4aW5",
  access_token_key: "709412533468327936-oOkRjmfIWAEJVeGI7NypXsjpw2Xz8u6",
  access_token_secret: "SGY7Prz1b5ONhXvlVwHFfyw33e9AfvLLRDRmFemaMk1kn"
});

var stream = null;
var track = "#MobScot";
var users = [];
var latestTweets = null;
var allTweets = [];
var requestLatestTweets = false;

function emitAllTweets(socket) {
  var top50;

  top50 = allTweets.slice(0, 100);

  socket.broadcast.emit('all tweets', top50);
  socket.emit('all tweets', top50);
}

function norTweets() {
  var i;

  for (i = 0; i < allTweets.length; i++) {
    allTweets[i].score = allTweets[i].favorite_count + allTweets[i].retweet_count + 1;
  }

  allTweets.sort(function(a, b) {
    if (a.score == b.score) {
      return a.id_str > b.id_str ? 1 : -1;
    }

    return a.score < b.score ? 1 : -1;
  });

  for (i = 0; i < allTweets.length; i++) {
    allTweets[i].number = i + 1;
  }
}

function addTweet(socket, tweet, update) {
  var exists = false, existsIndex = null, i;

  if (!tweet.in_reply_to_status_id && !tweet.retweeted_status) {
    for (i = 0; i < allTweets.length; i++) {
      if (allTweets[i].id_str === tweet.id_str) {
        exists = true;
        existsIndex = i;
        break;
      }
    }

    if (exists && update || !exists) {
      if (existsIndex !== null) {
        allTweets[existsIndex] = tweet;
      } else {
        allTweets.push(tweet);
      }

      norTweets();

      if (socket) {
        emitAllTweets(socket);
      }

      return true;
    }
  }

  return false;
}

function removeTweet(socket, tweetId) {
  var i;

  for (i = 0; i < allTweets.length; i++) {
    if (allTweets[i] === tweetId) {
      allTweets.splice(i, 1);
    }
  }

  norTweets();

  if (socket) {
    emitAllTweets(socket);
  }
}

function chunk(arr, len) {
  var chunks = [],
    i = 0,
    n = arr.length;

  while (i < n) {
    chunks.push(arr.slice(i, i += len));
  }

  return chunks;
}

function updateTweets(socket) {
  var allIds = [
    '735721355593678849',
    '735733400888188930',
    '735740091398643712',
    '735744933110288385',
    '735721591896608772',
    '735724004795809793',
    '735724340327550977',
    '735728512519143424',
    '735730440997195776',
    '735733457439981570',
    '735734114968473601',
    '735734950071140356',
    '735735266451718144',
    '735736061377150977',
    '735736086899478528',
    '735736192235233285',
    '735737167150862336',
    '735737885865873409',
    '735740979483803648',
    '735742548098977792',
    '735742858578165761',
    '735744874213822464',
    '735745398057275392',
    '735746253452017666',
    '735746591567450113',
    '735746853891776512',
    '735746914256199681',
    '735747242217197577',
    '735747515459375104',
    '735748598453805056',
    '735749117335375872',
    '735749183592751104',
    '735749682253565952',
    '735733572355555328',
    '735749898763538437',
    '735750203211321344',
    '735750618896175105',
    '735750839499776000',
    '735750880343953408',
    '735750953790382080',
    '735751028956532737',
    '735752121451040769',
    '735752223196467200',
    '735752401425031168',
    '735752490340077570',
    '735752565179092992',
    '735752712537526272',
    '735752865923239937',
    '735752966968201217',
    '735753007191580672',
    '735753597493772288',
    '735753892034547712',
    '735754183509303296',
    '735754199812603905',
    '735754263121383425',
    '735754757017477120',
    '735754825820839936',
    '735754837350981632',
    '735755368869961728',
    '735755038069428225',
    '735755368869961728',
    '735755440215097344',
    '735755507365904384',
    '735755648084803584',
    '735755812979625988',
    '735755847364575233',
    '735755883146158080',
    '735756111186268160',
    '735756127439200256',
    '735756193675673602',
    '735756430385381377',
    '735756461729415169',
    '735756587361402880',
    '735756588946857984',
    '735756793146531840',
    '735756914177409026',
    '735756964026667009',
    '735757363827744768',
    '735757606854131713',
    '735757737489899520',
    '735757875214061568',
    '735757905782149121',
    '735758332036710400',
    '735758764167417856',
    '735758781984825347',
    '735759026047225857',
    '735759574041387010',
    '735759768841637888',
    '735760034496270338',
    '735760223156084736',
    '735761542990331907',
    '735761666130857984',
    '735761748683153408',
    '735761793398644737',
    '735761925104013312',
    '735762154754703361',
    '735762234580684802',
    '735762266826510337',
    '735763045486460929',
    /*'723067773862158336',
    '723067726927921153',
    '723067703385313280',
    '723061857708310528',
    '723068058093363200',
    '723060513480028160',
    '723067637534699520',
    '723068058093363200',
    '723063907645009920',
    '723059876625149957',
    '723067274136006656',
    '723069654059638784',
    '723068238184235008',
    '723065346408763393',
    '723066521807925248',
    '723067172675829760',
    '723069484299354112',
    '723069022720413696',
    '723068742838693888',
    '723068971054968832',
    '723068606087569408'*/
  ], idChunks, i;

  for (i = 0; i < allTweets.length; i++) {
    allIds.push(allTweets[i].id_str);
  }

  idChunks = chunk(allIds, 100);

  if (idChunks.length) {
    for (i = 0; i < idChunks.length; i++) {
      (function(ids, i) {
        setTimeout(function() {
          console.log('Requesting tweet updates (' + (i * 100 + 1) + ' to ' + Math.min(allIds.length, i * 100 + 100) + ' of ' + allIds.length + ')...');

          twitterClient.post(
            'statuses/lookup',
            {
              id: ids.join(','),
              map: true,
              include_entities: true
            },
            function(error, data, response) {
              var k;

              if (data && 'id' in data) {
                console.log('Tweet updates received.');

                for (k in data.id) {
                  if (data.id.hasOwnProperty(k)) {
                    if (data.id[k] !== null) {
                      // probably updated
                      addTweet(socket, data.id[k], true);
                    } else {
                      // deleted or unavailable
                      removeTweet(socket, k);
                    }
                  }
                }
              } else {
                console.log(error);
                console.log('! Empty response when requesting tweet updates.');
              }
            }
          );
        }, i * 20 * 1000);
      })(idChunks[i], i);
    }

    setTimeout(function() {
      updateTweets(socket);
    }, idChunks.length * 20 * 1000);
  }
}

function logConnectedUsers() {
  console.log(users.length + ' users connected at this moment' + (users.length ? ': ' + users.join(', ') : '.'));
}

function disconnect() {
  console.log('! No users connected.');

  latestTweets = null;

  console.log(new Array(80).join('-'));
}

io.sockets.on("connection", function(socket) {
  if (users.indexOf(socket.id) === -1) {
    console.log('User connected: ' + socket.id);
    users.push(socket.id);
  }

  logConnectedUsers();

  if (stream !== null) {
    emitAllTweets(socket);
  }

  socket.on("start stream", function() {
    // the stream will be started only when the 1st user arrives.
    if (stream === null) {
      console.log('Initiating streaming...');
      twitterClient.stream("statuses/filter", {
        track: track
      }, function(s) {
        console.log('Streaming initiated.');

        stream = s;
        stream.on("data", function(tweet) {
          // only broadcast when users are online.
          if (users.length > 0) {
            if (addTweet(socket, tweet)) {
              console.log('New tweet!');

              // this emits the signal to all users but the one that started the stream.
              socket.broadcast.emit("new tweet", tweet);
              // this emits the signal to the user that started the stream.
              socket.emit("new tweet", tweet);
            }
          } else {
            disconnect();
          }
        });
        stream.on('error', function(error) {
          console.log('! Streaming error.', error);
        });

        if (requestLatestTweets) {
          console.log('Requesting previously posted tweets...');
          twitterClient.get('search/tweets', {
            q: track,
            result_type: 'recent',
            include_entities: true
          }, function(error, tweets, response) {
            var i;

            if (tweets && !error) {
              console.log('Previously posted tweets received.');

              latestTweets = tweets;

              for (i = 0; i < tweets.statuses.length; i++) {
                addTweet(socket, tweets.statuses[i]);
              }

              console.log('Previously posted tweets emitted.');

              socket.broadcast.emit('latest tweets', tweets);
              socket.emit('latest tweets', tweets);
            } else if (!tweets) {
              console.log('! No previously posted tweets found.');
            } else {
              console.log('! Could not retrieve previously posted tweets.');
            }
          });
        }

        setTimeout(function() {
          updateTweets(socket);
        }, 20 * 1000);

        console.log('Update tweets timer registered.');
      });
    }
  });

  socket.on("disconnect", function(o) {
    // find the user in the array.
    var index = users.indexOf(socket.id);

    if (index !== -1) {
      console.log('User ' + users[index] + ' disconnected.');
      users.splice(index, 1);
    }

    logConnectedUsers();

    if (!users.length) {
      disconnect();
    }
  });

  socket.emit("connected", {
    tracking: track
  });
});
